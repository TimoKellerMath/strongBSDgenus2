// This file list all genus 2 curves whose Jacobians have RM and are absolutely simple
// and that are contained in the LMFDB.

// Data

// From the LMFDB:
labels := [* "529.a.529.1", "841.a.841.1", "961.a.961.1", "961.a.961.2", "961.a.961.3",
  "961.a.923521.1", "1225.a.6125.1", "1521.a.41067.1", "2601.a.70227.1", "4225.a.274625.1",
  "4489.a.4489.1", "4489.c.4489.1", "5329.a.5329.1", "5329.b.5329.1", "5929.b.717409.1",
  "7225.a.36125.1", "7225.b.614125.1", "7569.a.68121.1", "7569.a.613089.1", "7744.b.495616.1",
  "8649.a.77841.1", "8649.a.233523.1", "10609.a.10609.1", "11449.a.11449.1", "13225.b.330625.1",
  "15129.b.408483.1", "15625.a.15625.1", "16641.a.449307.1", "17689.c.17689.1", "17689.d.866761.1",
  "17689.e.866761.1", "18225.c.54675.1", "18225.c.164025.1", "21609.a.453789.1", "27225.a.81675.1",
  "27889.a.27889.1", "30976.a.495616.1", "31329.a.31329.1", "35344.a.565504.1", "36481.a.36481.1",
  "37249.a.37249.1", "42025.a.42025.1", "42849.b.385641.1", "43681.a.829939.1", "44521.a.44521.1",
  "45369.a.45369.1", "48841.a.48841.1", "49729.a.49729.1", "51529.a.51529.1", "60025.a.420175.1",
  "62500.a.1000000.1", "68121.c.613089.1", "68121.c.613089.2", "75625.a.75625.1", "75625.b.75625.1",
  "82369.a.82369.1", "83521.a.83521.1", "89401.a.89401.1", "91809.a.275427.1", "97969.a.97969.1",
  "103041.a.927369.1", "111556.a.446224.1", "127449.a.892143.1", "128164.a.512656.1", "140625.a.140625.1",
  "141376.b.565504.1", "141376.e.565504.1", "146689.a.146689.1", "151321.a.151321.1", "208849.a.208849.1",
  "212521.a.212521.1", "241081.a.241081.1", "249001.a.249001.1", "273529.a.273529.1", "284089.a.284089.1",
  "358801.a.358801.1", "385641.a.385641.1", "385641.c.385641.1", "405769.a.405769.1", "409600.a.409600.1",
  "409600.b.409600.1", "418609.a.418609.1", "458329.a.458329.1", "466489.a.466489.1", "474721.a.474721.1",
  "565504.a.565504.1", "565504.f.565504.1", "565504.j.565504.1", "613089.a.613089.1", "638401.a.638401.1",
  "654481.a.654481.1", "700569.b.700569.1", "707281.a.707281.1", "714025.a.714025.1", "769129.a.769129.1",
  "786769.a.786769.1", "863041.a.863041.1" *];

P<x> := PolynomialRing(Rationals());

data := [
<P![0, 0, 0, 0, 0, -1], P![1, 1, 0, 1]>,
<P![2, 1, 3, 1, 1], P![0, 1, 1, 1]>,
<P![-33, 99, -145, 74, -7, -1, -1], P![1, 1, 0, 1]>,
<P![-7, 12, -18, 12, -8, 2, -1], P![1, 1, 0, 1]>,
<P![-1, -1, 0, 1, 1, 1], P![1, 1, 0, 1]>,
<P![-3, -2, 3, 4, -5], P![1, 0, 1, 1]>,
<P![2, 1, 1, 2], P![0, 0, 1, 1]>,
<P![2, 3, 4, 1, 1], P![1, 0, 0, 1]>,
<P![0, 9, 7, -2, -3], P![0, 1, 0, 1]>,
<P![1, 3, 10, 6, 4, 1], P![1, 0, 0, 1]>,
<P![0, -1, 0, 0, 0, 1], P![1, 1, 0, 1]>,
<P![18, 1, -21, -2, 7, 0, -1], P![1, 0, 1, 1]>,
<P![-8, 31, -40, 25, -16, -8, -1], P![1, 1, 0, 1]>,
<P![0, -1, 0, 1], P![1, 0, 1, 1]>,
<P![-1, -2, -1, 1, 1, 1], P![0, 1, 1]>,
<P![0, -1, -3, 0, 2, -1], P![1, 0, 0, 1]>,
<P![32, 155, 176, 67, 0, -5, -1], P![1, 0, 0, 1]>,
<P![-1, 1, -3, 1, -1], P![1, 1, 0, 1]>,
<P![-5, 7, -15, 11, -10, 3, -1], P![1, 1, 0, 1]>,
<P![-3, 8, 5, 7, 2, 1], P![]>,
<P![0, -2, 1, 1], P![1, 1, 0, 1]>,
<P![-70, -47, 7, 3, -3], P![1, 1, 0, 1]>,
<P![0, 1, 1], P![1, 1, 0, 1]>,
<P![-1, -1, -1, 0, 1], P![1, 0, 1, 1]>,
<P![0, 1, 1, 2], P![1, 1, 0, 1]>,
<P![-1, -3, -8, -12, -14, -9, -5], P![1]>,
<P![0, 0, 1, 2, 2, 2], P![1, 1, 0, 1]>,
<P![-1, -2, -1, 1, 1, -3, -4], P![1, 1, 1]>,
<P![0, 0, 1, 1, 2, 2], P![1, 1, 0, 1]>,
<P![5, -7, -2, 0, 2], P![1, 0, 1, 1]>,
<P![34, -13, -28, 7, 7, -1, -1], P![1, 1, 0, 1]>,
<P![1, -23, 23, 5, -11, 0, 1], P![1, 1, 0, 1]>,
<P![0, 1, 2, 1, 4, 0, 1], P![1, 1, 0, 1]>,
<P![2, -3, 2, 0, -1], P![1, 0, 0, 1]>,
<P![2, 3, 5, 2, 2], P![1, 0, 0, 1]>,
<P![-1, -1, -1, 0, 0, 1], P![1, 1, 0, 1]>,
<P![3, 8, -5, 7, -2, 1], P![]>,
<P![0, 1, 1, 1], P![1, 1, 0, 1]>,
<P![1, -2, 1, 1, -1, 1], P![]>,
<P![0, -2, 1], P![1, 1, 0, 1]>,
<P![0, 1, 1, -4], P![1, 1, 0, 1]>,
<P![0, 1, 1, -3], P![1, 1, 0, 1]>,
<P![2, 3, 3], P![1, 0, 0, 1]>,
<P![3, 3, 1], P![1, 1, 1, 1]>,
<P![4, 4, -8, -5, 5, 0, -1], P![1, 0, 1, 1]>,
<P![-1, 1, -2], P![1, 1, 0, 1]>,
<P![0, -1, 0, 1, 0, 1], P![1, 1, 0, 1]>,
<P![-18, 2, 2, -6, -1, 1], P![1, 0, 0, 1]>,
<P![-4, -1, 5, 1, -4, 1], P![0, 1, 1]>,
<P![12, -14, 0, 0, 7, -5, 1], P![1]>,
<P![-1, 5, -4, -8, 1, 2], P![0, 1, 1]>,
<P![7, 22, 14, -3, 4], P![1, 1, 0, 1]>,
<P![2, 7, 5, -3, -2], P![1, 1, 0, 1]>,
<P![4, -4, -10, 0, 7, 5, 1], P![1, 1, 0, 1]>,
<P![-7, 11, 0, -6, -1, 1], P![1, 1, 0, 1]>,
<P![-2, 3, -4, 1, 0, -1], P![1, 1, 0, 1]>,
<P![2, 2, -1, -4], P![1, 0, 1, 1]>,
<P![-3, 1, 5, 2], P![1, 0, 1, 1]>,
<P![-9, 9, 2, -2, -1], P![0, 0, 0, 1]>,
<P![-2, -23, -26, 1, 8, 0, -1], P![1, 0, 1, 1]>,
<P![8, -5, -14, 2, 6, 0, -1], P![1, 1, 0, 1]>,
<P![-2, -8, 9, 5, -6, -1, 1], P![0, 1, 1]>,
<P![3, -3, 5, -2, 2], P![0, 0, 0, 1]>,
<P![8, -2, -10, 3, 5, -1, -1], P![0, 1, 1]>,
<P![-4, 1, 1, 2, -3], P![1, 1, 0, 1]>,
<P![1, 4, 3, -3, -1, 1], P![]>,
<P![1, -2, 2, -1, 0, 1], P![]>,
<P![0, -1, 0, 2], P![1, 0, 1, 1]>,
<P![-17, 7, 17, -8, -3, 1], P![0, 0, 0, 1]>,
<P![5, 0, -8, -5, 0, 1], P![1, 1, 0, 1]>,
<P![-1, 2, -3], P![1, 0, 1, 1]>,
<P![-1, 2, -2, -1, 1], P![1, 0, 1, 1]>,
<P![0, 0, 1, 0, 2, 2], P![1, 1, 0, 1]>,
<P![0, 0, 1, -7, 2, 2], P![1, 1, 0, 1]>,
<P![7, 8, 15, 8, 8, 2, 1], P![1, 0, 0, 1]>,
<P![-1, 0, -2, 0, -1, -1], P![1, 1, 0, 1]>,
<P![-22, -30, 27, 6, -6], P![1, 0, 0, 1]>,
<P![-1, -2, -1, 0, 1], P![1, 1, 0, 1]>,
<P![0, 0, 1, 3, 2, 2], P![1, 1, 0, 1]>,
<P![-3, 1, 24, -7, -29, -14, -2], P![]>,
<P![3, 1, -24, -7, 29, -14, 2], P![]>,
<P![0, 0, 0, -3, 0, -1], P![1, 1, 0, 1]>,
<P![-1, -3, -3, 0, 0, -1], P![1, 1, 0, 1]>,
<P![-1, 2, -2, 0, 0, -1], P![0, 1, 1]>,
<P![1, -2, 1, 0, -1, 1], P![0, 1, 1]>,
<P![-1, -2, -1, 1, 1, 1], P![]>,
<P![-1, 4, -3, -3, 1, 1], P![]>,
<P![-1, -2, -2, -1, 0, 1], P![]>,
<P![-1, 1, -4, 2, -2], P![1, 1, 0, 1]>,
<P![-8, 1, 7, 0, -4], P![1, 0, 1, 1]>,
<P![-1, -1, 0, 1, 2], P![1, 0, 1, 1]>,
<P![-1, 12, -51, 36, 0, -6, 1], P![1, 0, 0, 1]>,
<P![1, 5, 3, -8, -2, 1], P![1, 1, 0, 1]>,
<P![1, 5, 5, 2, 1], P![1, 0, 1, 1]>,
<P![1, 2, 2, 1, 0, -1], P![0, 1, 1]>,
<P![-3, 1, 18, -8, -40, 9, 28], P![1, 1, 0, 1]>,
<P![-2, -4, -4, -1, 1], P![1, 0, 1, 1]>];


//===========================================================================

// Number of database entries.
number := #data;
assert number eq #labels;

//============================================================================

// Initialize:
LMFDB_curves := [Parent(<23, x, x, "xxx", 1>)| ];

char_base := StringToCode("a") - 1;

// Fill in data from the above.
for j := 1 to number do
  label := labels[j];
  Cdata := data[j];
  lsplit := Split(label, ".");
  cond := StringToInteger(lsplit[1]);
  cl := StringToCode(lsplit[2]) - char_base;
  flag, level := IsSquare(cond); assert flag;
  Append(~LMFDB_curves, <level, Cdata[1], Cdata[2], label, cl>);
end for;

